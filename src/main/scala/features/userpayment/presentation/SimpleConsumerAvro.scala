package features.userpayment.presentation

import core.infra.topics.MyKafkaConsumer
import org.apache.avro.Schema
import org.apache.avro.file.{DataFileReader, DataFileWriter}
import org.apache.log4j.Logger
import org.apache.avro.generic.{GenericData, GenericDatumReader, GenericRecord}
import org.apache.kafka.clients.consumer.{ConsumerRecords, KafkaConsumer}
import scala.collection.convert.ImplicitConversions._
import java.time.Duration
import java.time.temporal.ChronoUnit
import java.util.Properties

object SimpleConsumerAvro extends App {

  val logger = Logger.getLogger(this.getClass.getName)
  val props = new Properties()
  //bring the config file autogenerated by confluent(for scala) to resources path
  props.load(this.getClass.getResourceAsStream("/secret_kafka_cluster.properties"))
  props.put("key.deserializer","org.apache.kafka.common.serialization.StringDeserializer");
  props.put("value.deserializer", "io.confluent.kafka.serializers.KafkaAvroDeserializer")
  props.put("group.id", "simple_consumer05")



  val consumer: KafkaConsumer[String, GenericRecord] = MyKafkaConsumer.consumeFrom[String, GenericRecord]("correctAvro", props)

  while (true) {
    val record = consumer.poll(Duration.of(1, ChronoUnit.SECONDS))
    for (data <- record.iterator())
      logger.info(data)
  }

}
