package features.userpayment.presentation

import org.apache.kafka.clients.consumer.KafkaConsumer

import java.time.Duration
import java.time.temporal.ChronoUnit
import java.util.Properties
import java.util.regex.Pattern
import scala.collection.convert.ImplicitConversions._

object SimpleConsumer extends  App {

  val props = new Properties()
  //bring the config file autogenerated by confluent(for scala) to resources path
  props.load(this.getClass.getResourceAsStream("/secret_kafka_cluster.properties"))
  props.put("key.deserializer", "org.apache.kafka.common.serialization.StringDeserializer")
  props.put("value.deserializer", "org.apache.kafka.common.serialization.StringDeserializer")
  props.put("group.id", "simple_consumer03")

  val consumer: KafkaConsumer[String, String] = new KafkaConsumer[String, String](props)
  consumer.subscribe(Pattern.compile("poems"))

  while (true) {
    val record = consumer.poll(Duration.of( 1, ChronoUnit.SECONDS))
    for (data <- record.iterator)
      println(data.value())
  }


}
